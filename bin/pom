#!/usr/bin/env node
var daemonize   = require('daemonize2')
var command = require('commander')
var version = require('../package.json').version
var fs = require('fs')

var conf = {
    main: '../lib/pom.js',
    name: 'pom',
    pidfile: '/tmp/pom.pid',
    silent: true
}

command.version(version)


command
    .command('start [environment]')
    .description('start pomodoro timer')
    .action(function(environment){
        var environment = environment ? environment : 'default';
        conf['argv'] = environment
        var timer = daemonize.setup(conf)

        var isRunning = timer.status()
        if (isRunning) {
            showMinutesLeft()
            return
        }
        timer.start()
        console.log('pomodoro start')
    })

command
    .command('status')
    .description('check the status of pomodoro timer')
    .action(function(){
        var timer = daemonize.setup(conf)
        var isRunning = timer.status()
        if (isRunning) {
            showMinutesLeft()
        } else {
            console.log('--:--')
        }
    })

command
    .command('stop')
    .description('stop pomodoro timer')
    .action(function(){
        var timer = daemonize.setup(conf)
        timer.stop()
        console.log('pomodoro stop')
    })

command.parse(process.argv)

if (!command.args.length) command.help()

function showMinutesLeft() {
    fs.stat(conf.pidfile, function(err, stats) {
        if (err) {
            console.log(err)
        } else {
            var startTime = stats.ctime
            var now = new Date()
            var secondsDiff = (now.getTime() - startTime.getTime()) / 1000
            var minutesLeft = 24 - Math.floor(secondsDiff / 60)
            var secondsLeft = 59 - Math.floor(secondsDiff % 60)
            console.log(n(minutesLeft) + ':' + n(secondsLeft))
        }
    })
}

function n(n) {
  return n > 9 ? n : '0' + n;
}
